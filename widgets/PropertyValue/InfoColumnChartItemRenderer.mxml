<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.1.1
 | Copyright 2010 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false"
                dataChange="itemRenderer_dataChangeHandler(event)">

    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            import mx.formatters.CurrencyFormatter;
            import mx.formatters.NumberFormatter;

            [Bindable]
            private var fieldName:String;
            [Bindable]
            private var fieldValue:String;

            private function itemRenderer_dataChangeHandler(event:FlexEvent):void
            {
                if (data)
                {
                    if (data.alias)
                    {
                        fieldName = data.alias;
                    }
                    else
                    {
                        fieldName = data.field;
                    }

					if("" == data.format)
					{
						fieldValue = data.value;
					}
					else
					{
						var useThousandsSeparator:Boolean = 0 <= data.format.indexOf(",");

						var precision:Number = -1;
						var precisionLocation:Number = data.format.indexOf(".") + 1;
						if(0 < precisionLocation && data.format.length > precisionLocation)
						{
							try
							{
								precision = Number(data.format.substr(precisionLocation));
							}
							catch(error:Error)
							{
								precision = -1;  // i.e., disable precision
							}
						}

						try
						{
							var valueToDisplay:Number = data.value;
							if(isNaN(valueToDisplay))
							{
								fieldValue = data.value;
							}
							else
							{
								if(0 <= data.format.indexOf("$"))
								{
									// Format as currency
									var currencyFormatter:CurrencyFormatter = new CurrencyFormatter();
									currencyFormatter.useThousandsSeparator = useThousandsSeparator;
									currencyFormatter.precision = precision;
									fieldValue = currencyFormatter.format(valueToDisplay);
								}
								else
								{
									// Treat number as a percentage
									var suffix:String = "";
									if(0 <= data.format.indexOf("%"))
									{
										valueToDisplay *= 100;
										suffix = "%";
									}

									// Format as number
									var numberFormatter:NumberFormatter = new NumberFormatter();
									numberFormatter.useThousandsSeparator = useThousandsSeparator;
									numberFormatter.precision = precision;
									fieldValue = numberFormatter.format(valueToDisplay) + suffix;
								}
							}
						}
						catch(error:Error)
						{
							fieldValue = data.value;
						}
					}
                }
            }
        ]]>
    </fx:Script>

    <s:layout>
        <s:HorizontalLayout/>
    </s:layout>

    <s:Label id="field"
             width="100%"
             text="{fieldName} : "/>
    <s:Label id="value"
             height="20"
             text="{fieldValue}"/>

</s:ItemRenderer>
