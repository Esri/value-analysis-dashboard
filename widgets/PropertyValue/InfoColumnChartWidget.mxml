<?xml version="1.0" encoding="utf-8"?>
<!--
 | Version 10.1.1
 | Copyright 2010 Esri
 |
 | Licensed under the Apache License, Version 2.0 (the "License");
 | you may not use this file except in compliance with the License.
 | You may obtain a copy of the License at
 |
 |    http://www.apache.org/licenses/LICENSE-2.0
 |
 | Unless required by applicable law or agreed to in writing, software
 | distributed under the License is distributed on an "AS IS" BASIS,
 | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 | See the License for the specific language governing permissions and
 | limitations under the License.
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:viewer="com.esri.viewer.*"
	preinitialize="preinitializeHandler(event)"
	creationComplete="init()"
	implements="com.esri.viewer.IInfowindowTemplate">

    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;

            [Bindable]
            private var contentList:ArrayCollection;

            [Bindable]
            private var infoChartItemRenderer:ClassFactory = new ClassFactory(InfoColumnChartItemRenderer);

            [Bindable]
            private var title:String;

            [Bindable]
            private var columnChartList:ArrayCollection;

            private var _data:Object;

            private var itemChart:Object = {};
            private var item:Object = {};

			// fix for embedded chart in 4.6
			// by odejonge, http://forums.adobe.com/message/4143789
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;

			protected function preinitializeHandler(event:FlexEvent):void
			{
				var styleObjects:Array = FlexGlobals.topLevelApplication.styleManager.selectors;
				for each(var styleObj:String in styleObjects)  {
					var style:CSSStyleDeclaration = FlexGlobals.topLevelApplication.styleManager.getStyleDeclaration(styleObj);
					styleManager.setStyleDeclaration(styleObj, style, true);
				}
			}
			// end fix

            private function init():void
            {
                this.addEventListener(FlexEvent.DATA_CHANGE, setInfoParameters);
                infoClass = InfoColumnChartWidget;
            }

            public function set infoConfig(value:XML):void
            {

            }

            private function setInfoParameters(event:FlexEvent):void
            {
                if (_data)
                {
                    contentList = new ArrayCollection();
                    columnChartList = new ArrayCollection()

                    for each (var attribute:Object in _data.attributes)
                    {
                        for each (var field:Object in _data.listFields)
                        {
                            item = {
                                field: field.name,
                                value: attribute[field.name],
                                alias: field.alias,
								format: field.format
                            };
                            contentList.addItem(item);
                        }

                        for each (var columnChartField:Object in _data.columnChartFields)
                        {
                            itemChart = {
                                namefield: (columnChartField.alias != null ? columnChartField.alias : columnChartField.name),
                                field: attribute[columnChartField.name]
                            }
                            columnChartList.addItem(itemChart);
                        }
                    }
                }
            }

            public override function set data(value:Object):void
            {
                _data = value;

                label = _data.title; // set the label on the infoWindow
                dispatchEvent(new Event("infoWindowLabelChanged", true));

                setInfoParameters(null);
            }

            public override function get data():Object
            {
                return _data;
            }

            private var _infoClass:Class = InfoColumnChartWidget;

            public function set infoClass(value:Class):void
            {
                _infoClass = value;
            }

            public function get infoClass():Class
            {
                return _infoClass;
            }
        ]]>
    </fx:Script>

    <s:VGroup id="infoCanvas"
              width="250" height="100%"
              minHeight="90"
              visible="true">
        <s:Scroller width="100%" height="100%">
            <s:DataGroup id="dataGroup"
                         dataProvider="{contentList}"
                         itemRenderer="{infoChartItemRenderer}">
                <s:layout>
                    <s:VerticalLayout gap="1" useVirtualLayout="true"/>
                </s:layout>
            </s:DataGroup>
        </s:Scroller>

		<s:HGroup width="100%" height="100%"
			includeInLayout="{columnChartList.length > 0 ? true : false}"
			visible="{columnChartList.length > 0 ? true : false}">
			<mx:ColumnChart id="myChart"
		        width="95%" height="150"
		        dataProvider="{columnChartList}">
		        <mx:horizontalAxis>
		            <mx:CategoryAxis categoryField="namefield"/>
		        </mx:horizontalAxis>
		        <mx:series>
		            <mx:ColumnSeries displayName="field" xField="namefield" yField="field"/>
		        </mx:series>
		    </mx:ColumnChart>
		</s:HGroup>
    </s:VGroup>

</viewer:BaseWidget>
